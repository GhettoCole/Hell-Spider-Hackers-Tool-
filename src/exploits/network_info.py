import logging
import socket
from bs4 import BeautifulSoup
from urllib.request import urlopen
from Webcrawler import WebCrawler

colors = {
    'BLUE': '\33[1;94m',
    'RED': '\033[1;91m',
    'WHITE': '\33[1;97m',
    'YELLOW': '\33[1;93m',
    'MAGENTA': '\033[1;35m',
    'GREEN': '\033[1;32m',
    'END': '\033[0m',
}

logging.basicConfig(filename="net_intel.log", level=logging.DEBUG)


class NetworkIntelligence(WebCrawler):

    def __init__(self, base_url):
        super().__init__(base_url)

    def network_mapper(self):
        logging.info("Scanning for open ports using NMAP")
        command = f"nmap -F -sV {self.base_url}"
        try:
            process = os.popen(command)
            output = str(process.read())
            print(colors["MAGENTA"], "-" * 45, "NMAP Scan", "-" * 45, colors["END"])
            print(colors["BLUE"], output, colors["END"])
        except Exception as e:
            logging.error("Error occurred during NMAP scan")
            print(colors["RED"], "Error:", e, colors["END"])

    def robots(self):
        try:
            logging.info("Looking for robots.txt")
            robots_request = urlopen(f"{self.base_url}/robots.txt")
            robots = robots_request.read()
            if robots:
                bs_robots = BeautifulSoup(robots, "lxml")
                print(colors["MAGENTA"], "-" * 45, "Robots.txt", "-" * 45, colors["END"])
                print(colors["BLUE"], bs_robots.string, colors["END"])
            else:
                logging.info("Robots.txt not found")
                print(colors["GREEN"], "Robots.txt not found", colors["END"])
        except Exception as e:
            logging.error("Error occurred while fetching robots.txt")
            print(colors["RED"], "Error:", e, colors["END"])

    def whois_info(self):
        try:
            logging.info("Running WHOIS query")
            command = f"whois {self.base_url}"
            process = os.popen(command)
            output = str(process.read())
            print(colors["MAGENTA"], "-" * 45, "WHOIS Info", "-" * 45, colors["END"])
            print(colors["BLUE"], output, colors["END"])
        except Exception as e:
            logging.error("Error occurred during WHOIS query")
            print(colors["RED"], "Error:", e, colors["END"])

    def host_address(self):
        try:
            host = self.base_url.split('//')[1]
            logging.info(f"Resolving IP Address for {host}")
            results = socket.gethostbyname(host)
            if results:
                print(colors["MAGENTA"], "-" * 45, "IP Address", "-" * 45, colors["END"])
                print(colors["BLUE"], results, colors["END"])
        except socket.gaierror as e:
            logging.error("Error occurred during IP address resolution")
            print(colors["RED"], "Error:", e, colors["END"])
